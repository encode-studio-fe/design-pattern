(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{309:function(t,r,s){"use strict";s.r(r);var o=s(14),a=Object(o.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"结构型模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#结构型模式"}},[t._v("#")]),t._v(" 结构型模式")]),t._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),r("p",[t._v("结构型模式介绍如何将对象和类组装成较大的结构， 并同时保持结构的灵活和高效。")])]),t._v(" "),r("p",[r("RouterLink",{attrs:{to:"/structural/adapter.html"}},[r("strong",[t._v("适配器模式")])]),t._v(": 是一种结构型设计模式， 它能使接口不兼容的对象能够相互合作。")],1),t._v(" "),r("p",[r("RouterLink",{attrs:{to:"/structural/bridge.html"}},[r("strong",[t._v("桥接模式")])]),t._v(": 可将一个大类或一系列紧密相关的类拆分为抽象和实现两个独立的层次结构， 从而能在开发时分别使用。")],1),t._v(" "),r("p",[r("RouterLink",{attrs:{to:"/structural/composite.html"}},[r("strong",[t._v("组合模式")])]),t._v(": 将对象组合成树状结构， 并且能像使用独立对象一样使用它们。")],1),t._v(" "),r("p",[r("RouterLink",{attrs:{to:"/structural/decorator.html"}},[r("strong",[t._v("装饰模式")])]),t._v(": 将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。")],1),t._v(" "),r("p",[r("RouterLink",{attrs:{to:"/structural/facade.html"}},[r("strong",[t._v("外观模式")])]),t._v(": 为程序库、 框架或其他复杂类提供一个简单的接口。")],1),t._v(" "),r("p",[r("RouterLink",{attrs:{to:"/structural/flyweight.html"}},[r("strong",[t._v("享元模式")])]),t._v(": 摒弃了在每个对象中保存所有数据的方式， 通过共享多个对象所共有的相同状态， 让你能在有限的内存容量中载入更多对象。")],1),t._v(" "),r("p",[r("RouterLink",{attrs:{to:"/structural/proxy.html"}},[r("strong",[t._v("代理模式")])]),t._v(": 提供对象的替代品或其占位符。 代理控制着对于原对象的访问， 并允许在将请求提交给对象前后进行一些处理。")],1)])}),[],!1,null,null,null);r.default=a.exports}}]);