(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{302:function(t,s,r){"use strict";r.r(s);var o=r(14),a=Object(o.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"结构型模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结构型模式"}},[t._v("#")]),t._v(" 结构型模式")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("结构型模式介绍如何将对象和类组装成较大的结构， 并同时保持结构的灵活和高效。")])]),t._v(" "),s("p",[s("RouterLink",{attrs:{to:"/structural/adapter.html"}},[s("strong",[t._v("适配器模式")])]),t._v(": 是一种结构型设计模式， 它能使接口不兼容的对象能够相互合作。")],1),t._v(" "),s("p",[s("RouterLink",{attrs:{to:"/structural/bridge.html"}},[s("strong",[t._v("桥接模式")])]),t._v(": 可将一个大类或一系列紧密相关的类拆分为抽象和实现两个独立的层次结构， 从而能在开发时分别使用。")],1),t._v(" "),s("p",[s("RouterLink",{attrs:{to:"/structural/composite.html"}},[s("strong",[t._v("组合模式")])]),t._v(": 将对象组合成树状结构， 并且能像使用独立对象一样使用它们。")],1)])}),[],!1,null,null,null);s.default=a.exports}}]);