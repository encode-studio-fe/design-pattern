(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{312:function(t,o,r){"use strict";r.r(o);var a=r(14),s=Object(a.a)({},(function(){var t=this,o=t._self._c;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"创建者模式"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#创建者模式"}},[t._v("#")]),t._v(" 创建者模式")]),t._v(" "),o("div",{staticClass:"custom-block tip"},[o("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),o("p",[t._v("创建者模式提供了创建对象的机制， 能够提升已有代码的灵活性和可复用性。")])]),t._v(" "),o("p",[o("RouterLink",{attrs:{to:"/creational/factory.html"}},[o("strong",[t._v("工厂模式")])]),t._v(": 在父类中提供一个创建对象的方法， 允许子类决定实例化对象的类型。")],1),t._v(" "),o("p",[o("RouterLink",{attrs:{to:"/creational/abstract_factory.html"}},[o("strong",[t._v("抽象工厂模式")])]),t._v(": 创建一系列相关的对象， 而无需指定其具体类。")],1),t._v(" "),o("p",[o("RouterLink",{attrs:{to:"/creational/builder.html"}},[o("strong",[t._v("生成器模式")])]),t._v(": 允许使用相同的创建代码生成不同类型和形式的对象。")],1),t._v(" "),o("p",[o("RouterLink",{attrs:{to:"/creational/prototype.html"}},[o("strong",[t._v("原型模式")])]),t._v(": 能够复制已有对象， 而又无需使代码依赖它们所属的类。")],1),t._v(" "),o("p",[o("RouterLink",{attrs:{to:"/creational/singleton.html"}},[o("strong",[t._v("单例模式")])]),t._v(": 能够保证一个类只有一个实例， 并提供一个访问该实例的全局节点。")],1)])}),[],!1,null,null,null);o.default=s.exports}}]);